#!/usr/bin/env python
#
# Copyright 2005, 2006 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

# OFDM transmitter that works on both USRP1 and USRP2, standard and UHD driver
# Revised: Veljko Pejovic (veljko@cs.ucsb.edu)



#********************Should not parse the args of the sensor

from gnuradio import gr, blks2
from gnuradio import usrp
from gnuradio import eng_notation
from gnuradio.eng_option import eng_option
from optparse import OptionParser
import string
import os

import time, struct, sys
import ofdm
import usrp_transmit_path
sys.path.append('/usr/local/lib/python2.6/dist-packages/ofdmnew2')
import ofdmnew2_swig

class my_top_block(gr.top_block):
	def __init__(self, options):
		gr.top_block.__init__(self)

		self.txpath = usrp_transmit_path.usrp_transmit_path(options)
		self.connect(self.txpath)


	def _print_verbage(self):
		print "Using TX d'board %s"    % (self.subdev.side_and_name(),)
		print "modulation:      %s"    % (self._modulator_class.__name__)
		print "interp:          %3d"   % (self._interp)
		print "Tx Frequency:    %s"    % (eng_notation.num_to_str(self._tx_freq))

        def string_pass(): 
                fd=open('string_pipe','r')
                string=fd.read()
                usrp_transmit_path.string_pass_l2(string) 
                  
def main():

	def send_pkt(payload='',carrier_map="FE7F",eof=False):
		return tb.txpath.send_pkt(payload, eof,carrier_map)

	parser = OptionParser(option_class=eng_option, conflict_handler="resolve")
	expert_grp = parser.add_option_group("Expert")
	parser.add_option("-s", "--size", type="eng_float", default=400, help="set packet size [default=%default]")
	parser.add_option("-M", "--megabytes", type="eng_float", default=1.0, help="set megabytes to transmit [default=%default]")
	parser.add_option("","--discontinuous", action="store_true", default=False, help="enable discontinuous mode")
	parser.add_option("","--from-file", default=None, help="use file for packet contents")
        #parser.add_option("-e", "--interface", type="string", default="eth0", help="Select ethernet interface. Default is eth0")
	#parser.add_option("-m", "--MAC_addr", type="string", default="", help="Select USRP2 by its MAC address.Default is auto-select")
	#parser.add_option("-a", "--start", type="eng_float", default=1e7, help="Start ferquency [default = %default]")
	#parser.add_option("-b", "--stop", type="eng_float", default=1e8,help="Stop ferquency [default = %default]")
	#parser.add_option("", "--tune-delay", type="eng_float", default=1e-3, metavar="SECS", help="time to delay (in seconds) after changing frequency[default=%default]")
	#parser.add_option("", "--dwell-delay", type="eng_float",default=10e-3, metavar="SECS", help="time to dwell (in seconds) at a given frequncy[default=%default]")
	#parser.add_option("-g", "--gain", type="eng_float", default=None,help="set gain in dB (default is midpoint)")
	#parser.add_option("-s", "--fft-size", type="int", default=256, help="specify number of FFT bins [default=%default]")
	#parser.add_option("-d", "--decim", type="intx", default=16, help="set decimation to DECIM [default=%default]")
        #parser.add_option("-i", "--input_file", default="", help="radio input file",metavar="FILE")
        #parser.add_option("-S", "--sense-bins", type="int", default=64, help="set number of bins in the OFDM block [default=%default]")
	
	usrp_transmit_path.add_options(parser, expert_grp)
	blks2.ofdm_mod.add_options(parser, expert_grp)

	(options, args) = parser.parse_args ()
	fd= os.open('/home/spann/fifo',os.O_RDONLY) # Open the named pipe to pass on the sensed info to the transmitter part

	if len(args) != 0:
		parser.print_help()
		sys.exit(1)

	if options.tx_freq is None:
		sys.stderr.write("You must specify -f FREQ or --freq FREQ\n")
		parser.print_help(sys.stderr)
		sys.exit(1)

	if options.from_file is not None:
		source_file = open(options.from_file, 'r')


	tb = my_top_block(options)

	r = gr.enable_realtime_scheduling()
	if r != gr.RT_OK:
		print "Warning: failed to enable realtime scheduling"

	tb.start()                       # start flow graph

	nbytes = int(1e6 * options.megabytes)
	n = 0
	tx_success=0
	pktno = 0
	pkt_size = int(options.size)
        start_time = 0
	last_time = 0
	carrier_map="FFFFFE7FFFFFF"
	new_freq = options.tx_freq
	count_init=0
	
#	string_pipe=open('string_pipe','r')
        while n < nbytes:
	        if count_init>2000:
	#	carrier_map_new=string_pipe.readline()
         #       carrier_map_new=carrier_map[0:(len(carrier_map)-1)] 
		    if (pktno%4000)==0:
			print "occupied tones",options.occupied_tones
			carrier_map = os.read(fd,64) #64 is the length of the hexa_thr equal to fftsize/4
			carrier_map=carrier_map[7:57]
			print "carrier_map after reading is",carrier_map
			print "carrier_map length",len(carrier_map)			
			#if string.count(carrier_map,'0') >= 180:
			    #carrier_map="FFFFFE7FFFFFF"
			    #tx_success=tb.txpath.sink.set_center_freq(new_freq+1e6)
			    #if tx_success:
			      #new_frew=new_freq+1e6
			      #print "successfully"
			    #print "Freq changed to "
			    #print new_freq
			
                if options.from_file is None:
			data = (pkt_size - 2) * chr(pktno & 0xff) 
		else:
			if pktno < 20:
			    data = (pkt_size - 2) * chr(pktno & 0xff)
			else:
			    data = source_file.read(pkt_size - 2)
			    if data == '':
				    break;
                #print "count_int=",count_init 
		count_init=count_init + 1
		payload = struct.pack('!H', pktno & 0xffff) + data
		send_pkt(payload,carrier_map)
		n += len(payload)
		sys.stderr.write('.')
		if options.discontinuous and pktno % 10 == 1:
			time.sleep(1)
		pktno += 1
	send_pkt(eof=True)

	tb.wait()
	
if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		pass
